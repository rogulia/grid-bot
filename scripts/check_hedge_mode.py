#!/usr/bin/env python3
"""Check and enable hedge mode for dual-sided trading"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from src.utils.config_loader import ConfigLoader
from src.exchange.bybit_client import BybitClient


def main():
    print("\n" + "=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê HEDGE MODE")
    print("=" * 60)

    try:
        # Load config
        config = ConfigLoader()
        api_key, api_secret = config.get_api_credentials()
        demo = config.is_demo()
        strategy_config = config.get_strategy_config()
        symbol = strategy_config.get('symbol', 'SOLUSDT')
        category = strategy_config.get('category', 'linear')

        print(f"Environment: {'DEMO' if demo else 'PRODUCTION'}")
        print(f"Symbol: {symbol}")
        print(f"Category: {category}")
        print()

        # Initialize client
        client = BybitClient(api_key=api_key, api_secret=api_secret, demo=demo)

        # Check current position mode
        print("üìä Checking current position mode...")

        try:
            # Get position info to check mode
            response = client.session.get_positions(
                category=category,
                symbol=symbol
            )

            if response and 'result' in response:
                positions = response['result'].get('list', [])

                if positions:
                    position = positions[0]
                    position_idx = position.get('positionIdx', 0)

                    print(f"Position Index: {position_idx}")
                    print()

                    if position_idx == 0:
                        print("‚ùå –†–ï–ñ–ò–ú: One-Way Mode (–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π)")
                        print("   –ú–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ LONG –∏–ª–∏ SHORT")
                        print()
                        print("‚ö†Ô∏è  –î–õ–Ø DUAL-SIDED –°–¢–†–ê–¢–ï–ì–ò–ò –ù–£–ñ–ï–ù HEDGE MODE!")
                        print()

                        # Try to switch to hedge mode
                        print("üîÑ –ü—ã—Ç–∞—é—Å—å –≤–∫–ª—é—á–∏—Ç—å Hedge Mode...")
                        try:
                            switch_response = client.session.switch_position_mode(
                                category=category,
                                symbol=symbol,
                                mode=3  # 3 = Both Side mode (Hedge)
                            )

                            if switch_response.get('retCode') == 0:
                                print("‚úÖ Hedge Mode —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!")
                                print()
                                print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ:")
                                print("  ‚Ä¢ LONG –ø–æ–∑–∏—Ü–∏–∏")
                                print("  ‚Ä¢ SHORT –ø–æ–∑–∏—Ü–∏–∏")
                            else:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å Hedge Mode")
                                print(f"Response: {switch_response}")
                                print()
                                print("–†–ï–®–ï–ù–ò–ï: –í–∫–ª—é—á–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –Ω–∞ Bybit:")
                                if demo:
                                    print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
                                else:
                                    print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://www.bybit.com")
                                print(f"  2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é {symbol}")
                                print("  3. Settings ‚Üí Position Mode ‚Üí Hedge Mode")

                        except Exception as e:
                            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏: {e}")
                            print()
                            print("–†–ï–®–ï–ù–ò–ï: –í–∫–ª—é—á–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –Ω–∞ Bybit:")
                            if demo:
                                print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
                            else:
                                print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://www.bybit.com")
                            print(f"  2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é {symbol}")
                            print("  3. Settings ‚Üí Position Mode ‚Üí Hedge Mode")

                    else:
                        print("‚úÖ –†–ï–ñ–ò–ú: Hedge Mode (Both Side)")
                        print("   –ú–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ LONG –∏ SHORT")
                        print()
                        print("üéâ –í—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                        print("   –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
                else:
                    print("‚ÑπÔ∏è  –ü–æ–∑–∏—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
                    print()
                    print("üîÑ –ü—ã—Ç–∞—é—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞...")

                    # Try to set hedge mode proactively
                    try:
                        switch_response = client.session.switch_position_mode(
                            category=category,
                            symbol=symbol,
                            mode=3  # 3 = Both Side mode (Hedge)
                        )

                        if switch_response.get('retCode') == 0:
                            print("‚úÖ Hedge Mode —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!")
                        elif switch_response.get('retCode') == 110025:
                            print("‚úÖ Hedge Mode —É–∂–µ –≤–∫–ª—é—á–µ–Ω!")
                        else:
                            print(f"‚ö†Ô∏è  –û—Ç–≤–µ—Ç API: {switch_response.get('retMsg', 'Unknown')}")

                    except Exception as e:
                        print(f"‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
                        print()
                        print("–í–∫–ª—é—á–∏—Ç–µ Hedge Mode –≤—Ä—É—á–Ω—É—é –Ω–∞ Bybit:")
                        if demo:
                            print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
                        else:
                            print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://www.bybit.com")
                        print(f"  2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é {symbol}")
                        print("  3. Settings ‚Üí Position Mode ‚Üí Hedge Mode")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö")
                print(f"Response: {response}")

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∂–∏–º–∞: {e}")
            print()
            print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
            print("–í–∫–ª—é—á–∏—Ç–µ Hedge Mode –≤—Ä—É—á–Ω—É—é –Ω–∞ Bybit:")
            if demo:
                print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://testnet.bybit.com")
            else:
                print("  1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://www.bybit.com")
            print(f"  2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é {symbol}")
            print("  3. Settings ‚Üí Position Mode ‚Üí Hedge Mode (Both Side)")
            print()
            print("–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ LONG –∏ SHORT –ø–æ–∑–∏—Ü–∏–∏")

        print()
        print("=" * 60)
        print()

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main())
